plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "io.freefair.lombok" version "${lombokPluginVersion}"
}

java {
    version = JavaLanguageVersion.of("${javaVersion}")
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("${javaVersion}"))
    }
}

[compileJava, compileTestJava]*.options*.encoding = "${projectEncoding}"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation "org.springframework:spring-context:${springFrameworkVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"

    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"
}

application {
    // Define the main class for the application.
    mainClass = 'org.fp024.spring5recipes.study.sequence.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    /*
        터미널에서 테스트 클래스 실행 예시
        > gradlew test --tests *TestClassName.testMethodName
    */
    // 터미널에서 테스트 실행시 테스트 실행 로그의 콘솔 출력을 위해 추가
    // IntelliJ에서는 이 옵션과 관련없이 테스트 실행 로그가 잘 출력된다.
    // https://stackoverflow.com/questions/40954017/gradle-how-to-get-output-from-test-stderr-stdout-into-console
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

// 콘솔 애플리케이션으로서 표준입력을 받을 때, 사용하자!
/*
run {
    standardInput = System.in
}
*/
