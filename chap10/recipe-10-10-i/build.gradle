plugins {
  id 'application'
  id "io.freefair.lombok" version "${lombokPluginVersion}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of("${javaVersion}")
  }
}

apply from: "../../gradle/default-settings.gradle"

dependencies {
  implementation "org.springframework:spring-context:${springVersion}"
  implementation "org.springframework:spring-aspects:${springVersion}"
  implementation "org.springframework:spring-jdbc:${springVersion}"

  runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"

  implementation "org.hsqldb:hsqldb:${hsqldbVersion}"

  // mybatis의 주요 기능은 사용하지 않고 리소스 경로의 sql 파일읽어와서 실행시키는 기능만 사용한다.
  implementation "org.mybatis:mybatis:${mybatisVersion}"

  implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
  
  testImplementation "org.springframework:spring-test:${springVersion}"
  testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
  testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
}

String aspectjweaverPath() {
  return sourceSets.getByName("main").runtimeClasspath.find {
    cls -> return cls.getName().contains("aspectjweaver")
  }
}

final ASPECTJ_WEAVER_PATH = aspectjweaverPath()

test {
  jvmArgs = 
    [
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "-javaagent:${ASPECTJ_WEAVER_PATH}"
    ]
}

application {
  applicationDefaultJvmArgs = 
    [
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "-javaagent:${ASPECTJ_WEAVER_PATH}"
    ]
  mainClass = 'org.fp024.study.spring5recipes.bookshop.Main'
}